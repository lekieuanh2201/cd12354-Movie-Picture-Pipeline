name: CD Pipeline for Frontend

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend
  CLUSTER_NAME: cluster
  CONTAINER_NAME: frontend

jobs:
  lint:
    name: Lint Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.14.2'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

  test:
    name: Test Job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.14.2'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

  build:
    name: Build Job
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image 
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} -t $ECR_REPOSITORY:latest .

  push-to-ecr:
    name: Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker Image
        run: |
          docker tag $ECR_REPOSITORY:latest 141233220008.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

      - name: Push Docker Image to ECR
        run: |
          docker push 141233220008.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to EKS 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/frontend/k8s
    needs: push-to-ecr
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Set up Kustomize
        run: |
          sudo curl -sLo /usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz && \
          sudo chmod +x /usr/local/bin/kustomize

      - name: Deploy using Kustomize
        run: |
          kustomize edit set image frontend=141233220008.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
          kustomize build | kubectl apply -f -
